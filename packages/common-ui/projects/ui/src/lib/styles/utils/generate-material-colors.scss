@use '../palette';

@mixin youtube-primary-colors {
  $colors-map: ();

  @each $key, $value in $youtube-primary {
    @if $key !=contrast {
      .yt-primary-#{$key} {
        color: map-get($youtube-primary, $key);
      }

      $map: ();
      $map: map-merge($map, ($key: $value));
      $colors-map: map-merge($colors-map, $map);
    }
  }

  :root {
    @each $key, $value in $colors-map {
      --yt-primary-#{$key}: #{$value};
    }
  }
}

@mixin youtube-accent-colors {
  $colors-map: ();

  @each $key, $value in $youtube-accent {
    @if $key !=contrast {
      .yt-accent-#{$key} {
        color: map-get($youtube-accent, $key);
      }

      $map: ();
      $map: map-merge($map, ($key: $value));
      $colors-map: map-merge($colors-map, $map);
    }
  }

  :root {
    @each $key, $value in $colors-map {
      --yt-accent-#{$key}: #{$value};
    }
  }
}

@mixin youtube-warning-colors {
  $colors-map: ();

  @each $key, $value in $youtube-warning {
    @if $key !=contrast {
      .yt-warning-#{$key} {
        color: map-get($youtube-warning, $key);
      }

      $map: ();
      $map: map-merge($map, ($key: $value));
      $colors-map: map-merge($colors-map, $map);
    }
  }

  :root {
    @each $key, $value in $colors-map {
      --yt-warning-#{$key}: #{$value};
    }
  }
}

@mixin generate-material-classes {
  @include youtube-primary-colors();
  @include youtube-accent-colors();
  @include youtube-warning-colors();
}